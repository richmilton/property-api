#!/usr/bin/env node

require('dotenv').config();
const app = require('../app');
const debug = require('debug')('property-api:server');
const https = require('https');
const http = require('http');
const path = require('path');
const fs = require('fs');

const certOptions = {
  key: fs.readFileSync(path.resolve('.ssl/server.key')),
  cert: fs.readFileSync(path.resolve('.ssl/server.crt'))
};

const port = normalizePort(process.env.APP_PORT || '3000');

const startServer = {
  https: () => https.createServer(certOptions, app).listen(443),
  http: () => http.createServer(app).listen(port),
};

const server = startServer[process.env.APP_PROTOCOL]();

server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
